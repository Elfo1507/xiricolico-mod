name: Build and Test

on:
  push:
    branches: [ main, develop, 'feature/**', 'story/**', 'hotfix/**', 'release-*' ]
  pull_request:
    branches: [ main, develop, 'feature/**', 'release-*' ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Validate branch naming
      if: github.event_name == 'push' && !contains(fromJson('["refs/heads/main", "refs/heads/develop"]'), github.ref)
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "Validating branch name: $BRANCH_NAME"
        
        if [[ "$BRANCH_NAME" =~ ^story/.+ ]]; then
          echo "‚úÖ Story branch detected: $BRANCH_NAME"
        elif [[ "$BRANCH_NAME" =~ ^feature/.+ ]]; then
          echo "‚úÖ Feature branch detected: $BRANCH_NAME"
        elif [[ "$BRANCH_NAME" =~ ^hotfix/.+ ]]; then
          echo "‚úÖ Hotfix branch detected: $BRANCH_NAME"
        elif [[ "$BRANCH_NAME" =~ ^release-[0-9]+\.[0-9]+\.[0-9]+.* ]]; then
          echo "‚úÖ Release branch detected: $BRANCH_NAME"
          # Extract and validate version
          VERSION=${BRANCH_NAME#release-}
          VERSION=${VERSION%/}
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          echo "   üìä Version: $MAJOR.$MINOR.$PATCH (MAJOR.MINOR.PATCH)"
        else
          echo "‚ùå Branch name '$BRANCH_NAME' does not follow gitflow convention"
          echo "‚úÖ Valid patterns:"
          echo "   - story/your-story-name"
          echo "   - feature/your-feature-name"
          echo "   - hotfix/your-fix-name"
          echo "   - release-x.x.x/"
          exit 1
        fi
        
    - name: Validate version format (release branches)
      if: startsWith(github.ref, 'refs/heads/release-')
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        VERSION=${BRANCH_NAME#release-}
        VERSION=${VERSION%/}
        
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Release branch must follow semantic versioning: release-x.y.z/"
          echo "‚ùå Current: $BRANCH_NAME"
          echo "‚úÖ Expected format: release-12.8.23/ or release-1.11.4/"
          echo "üìã Version format:"
          echo "   - MAJOR.MINOR.PATCH (e.g., 12.8.23)"
          echo "   - MAJOR: Breaking changes (incompatible API changes)"
          echo "   - MINOR: New features (backwards compatible)"
          echo "   - PATCH: Bug fixes and small improvements"
          exit 1
        fi
        
        # Extract version numbers
        MAJOR=$(echo "$VERSION" | cut -d. -f1)
        MINOR=$(echo "$VERSION" | cut -d. -f2)
        PATCH=$(echo "$VERSION" | cut -d. -f3)
        
        echo "‚úÖ Valid semantic version: $VERSION"
        echo "   üìä MAJOR: $MAJOR (breaking changes)"
        echo "   üÜï MINOR: $MINOR (new features)"
        echo "   üîß PATCH: $PATCH (bug fixes)"
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Run tests
      run: ./gradlew test
      continue-on-error: false
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: mod-jar-${{ github.sha }}
        path: build/libs/*.jar
        retention-days: 30
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.sha }}
        path: build/test-results/
        retention-days: 7
        
    - name: Upload build reports
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-reports-${{ github.sha }}
        path: build/reports/
        retention-days: 7

  # Job para validar PRs seguindo GitFlow
  validate-gitflow-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Validate PR GitFlow rules
      run: |
        echo "Validating PR: ${{ github.head_ref }} ‚Üí ${{ github.base_ref }}"
        
        # Regras para PR para main
        if [[ "${{ github.base_ref }}" == "main" ]]; then
          if [[ ! "${{ github.head_ref }}" =~ ^release-[0-9]+\.[0-9]+\.[0-9]+.* ]]; then
            echo "‚ùå PRs to main must be from release-x.x.x/ branches only"
            echo "‚ùå Current head: ${{ github.head_ref }}"
            echo "‚úÖ Valid format: release-1.2.0/"
            exit 1
          fi
        fi
        
        # Regras para PR para release
        if [[ "${{ github.base_ref }}" =~ ^release-.+ ]]; then
          if [[ ! "${{ github.head_ref }}" =~ ^(feature|hotfix)/.+ ]]; then
            echo "‚ùå PRs to release branches must be from feature/* or hotfix/* only"
            echo "‚ùå Current head: ${{ github.head_ref }}"
            exit 1
          fi
        fi
        
        # Regras para PR para feature
        if [[ "${{ github.base_ref }}" =~ ^feature/.+ ]]; then
          if [[ ! "${{ github.head_ref }}" =~ ^story/.+ ]]; then
            echo "‚ùå PRs to feature branches must be from story/* only"
            echo "‚ùå Current head: ${{ github.head_ref }}"
            exit 1
          fi
        fi
        
        # Regras para PR para develop (aceita qualquer branch)
        if [[ "${{ github.base_ref }}" == "develop" ]]; then
          echo "‚úÖ PR to develop branch accepted from any branch type"
        fi
        
        echo "‚úÖ GitFlow PR validation passed"

  # Job espec√≠fico para validar PRs para main
  validate-main-pr:
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    steps:
    - name: Validate PR to main
      run: |
        if [[ ! "${{ github.head_ref }}" =~ ^release-[0-9]+\.[0-9]+\.[0-9]+.* ]]; then
          echo "‚ùå PRs to main must be from release-x.y.z/ branches only"
          echo "‚úÖ Current head branch: ${{ github.head_ref }}"
          echo "üìã Valid examples:"
          echo "   - release-1.2.3/"
          echo "   - release-12.8.23/"
          echo "   - release-2.15.7/"
          exit 1
        fi
        
        # Extract and display version info
        VERSION="${{ github.head_ref }}"
        VERSION=${VERSION#release-}
        VERSION=${VERSION%/}
        MAJOR=$(echo "$VERSION" | cut -d. -f1)
        MINOR=$(echo "$VERSION" | cut -d. -f2)
        PATCH=$(echo "$VERSION" | cut -d. -f3)
        
        echo "‚úÖ PR to main from valid release branch: ${{ github.head_ref }}"
        echo "üìä Version: $MAJOR.$MINOR.$PATCH"
        echo "   üìä MAJOR: $MAJOR (breaking changes)"
        echo "   üÜï MINOR: $MINOR (new features)"  
        echo "   üîß PATCH: $PATCH (bug fixes)"
